import json
from django.contrib.gis.db import models
from django.contrib.gis.geos import Point
from preferences.models import Preferences
from bot import types
from bot.misc import i18n, __


class User(models.Model):
    TYPES = ((types.User.CLIENT, '–ö–ª–∏–µ–Ω—Ç'), (types.User.MASTER, '–ú–∞—Å—Ç–µ—Ä'))
    created = models.DateTimeField('üïê –°–æ–∑–¥–∞–Ω, –ø–æ UTC', auto_now_add=True)
    user_id = models.BigIntegerField('ID', unique=True, primary_key=True)
    username = models.CharField('@—é–∑–µ—Ä–Ω–µ–π–º', max_length=256, blank=True, null=True)
    first_name = models.CharField('–ò–º—è', max_length=256, blank=True, null=True)
    last_name = models.CharField('–§–∞–º–∏–ª–∏—è', max_length=256, blank=True, null=True)
    type = models.CharField('–¢–∏–ø', max_length=8, default=None, null=True, choices=TYPES)
    categories = models.ManyToManyField('Subcategory', verbose_name='–°—É–±-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', default=None)
    portfolio = models.ForeignKey('Portfolio', models.CASCADE, verbose_name='–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', default=None, null=True)
    location = models.PointField('–õ–æ–∫–∞—Ü–∏—è', geography=True, default=Point(0, 0))
    city = models.ForeignKey('City', models.CASCADE, verbose_name='–ì–æ—Ä–æ–¥', default=None, null=True)
    balance = models.PositiveIntegerField('–ë–∞–ª–∞–Ω—Å', default=0)
    phone = models.CharField('–¢–µ–ª–µ—Ñ–æ–Ω', max_length=16, default=None, null=True)
    is_active_master = models.BooleanField('–ê–∫—Ç–∏–≤–µ–Ω –º–∞—Å—Ç–µ—Ä', default=False)
    is_active_client = models.BooleanField('–ê–∫—Ç–∏–≤–µ–Ω –∫–ª–∏–µ–Ω—Ç', default=False)
    is_banned = models.BooleanField('–ë–∞–Ω', default=False)
    language = i18n.default
    # service only
    state = models.CharField(max_length=256, default=None, null=True)
    state_data = models.TextField(max_length=16384, default=None, null=True)

    def text(self, name):
        return __(name, locale=self.language)

    def set_state(self, state):
        self.state = state
        self.save()

    def reset_state(self):
        self.state = None
        self.state_data = None
        self.save()

    def get_state_data(self) -> dict:
        return json.loads(self.state_data or '{}')

    def update_state_data(self, data: dict) -> dict:
        temp = json.loads(self.state_data or '{}')
        temp.update(data)
        self.state_data = json.dumps(temp)
        self.save()
        return temp

    def __str__(self):
        return str(self.user_id)

    class Meta:
        ordering = ('-created',)
        verbose_name = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'


class Log(models.Model):
    TYPES = ((types.Log.TEXT, 'üÖ∞Ô∏è –¢–µ–∫—Å—Ç'), (types.Log.REPLY_BUTTON, '‚èπ Reply-–∫–Ω–æ–ø–∫–∞'),
             (types.Log.INLINE_BUTTON, '‚è∫ Inline-–∫–Ω–æ–ø–∫–∞'), (types.Log.COMMAND, '‚ú≥Ô∏è –ö–æ–º–∞–Ω–¥–∞'))
    created = models.DateTimeField('üïê –°–æ–∑–¥–∞–Ω, –ø–æ UTC', auto_now_add=True)
    user = models.ForeignKey(User, models.CASCADE)
    type = models.CharField('–¢–∏–ø', max_length=16, choices=TYPES)
    content = models.CharField('–ö–æ–Ω—Ç–µ–Ω—Ç', max_length=4096, blank=True, null=True)

    def __str__(self):
        return str(self.content)

    class Meta:
        ordering = ('-created',)
        verbose_name = '–ª–æ–≥'
        verbose_name_plural = '–ª–æ–≥–∏'


class Country(models.Model):
    name = models.CharField('–°—Ç—Ä–∞–Ω–∞', max_length=128)

    def __str__(self):
        return self.name


class City(models.Model):
    name = models.CharField('–ì–æ—Ä–æ–¥', max_length=128)
    country = models.ForeignKey(Country, models.CASCADE, verbose_name='–°—Ç—Ä–∞–Ω–∞')

    def __str__(self):
        return self.name


class Portfolio(models.Model):
    text = models.CharField('–¢–µ–∫—Å—Ç', max_length=4096, default=None, null=True)
    message_id = models.PositiveIntegerField(default=None, null=True)

    @property
    def photo(self):
        return Media.objects.filter(portfolio=self, type=types.Media.PHOTO)

    @property
    def video(self):
        return Media.objects.filter(portfolio=self, type=types.Media.VIDEO)

    def __str__(self):
        return str(self.id)

    class Meta:
        verbose_name = '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
        verbose_name_plural = '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'


class Category(models.Model):
    title = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=512)
    radius = models.PositiveIntegerField('–†–∞–¥–∏—É—Å, –∫–º', default=5)

    @property
    def subcategories(self):
        return Subcategory.objects.filter(category=self)

    def __str__(self):
        return str(self.title)

    class Meta:
        ordering = ('id',)
        verbose_name = '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'


class Subcategory(models.Model):
    title = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=512)
    category = models.ForeignKey(Category, models.CASCADE, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')

    def __str__(self):
        return str(self.title)

    class Meta:
        verbose_name = '—Å—É–±-–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '—Å—É–±-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'


class Order(models.Model):
    STATUSES = ((types.Order.WAIT, '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'), (types.Order.FOUND, '‚úÖ –ú–∞—Å—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω'),
                (types.Order.NOT_FOUND, '‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'), (types.Order.CANCELED, '‚ùé –ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ'))
    created = models.DateTimeField('üïê –°–æ–∑–¥–∞–Ω, –ø–æ UTC', auto_now_add=True)
    client = models.ForeignKey(User, models.CASCADE, verbose_name='–ö–ª–∏–µ–Ω—Ç', related_name='client')
    master = models.ForeignKey(User, models.CASCADE, verbose_name='–ú–∞—Å—Ç–µ—Ä', related_name='master', default=None, null=True)
    subcategory = models.ForeignKey(Subcategory, models.CASCADE, verbose_name='–°—É–±-–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    location = models.PointField('–õ–æ–∫–∞—Ü–∏—è', geography=True)
    city = models.ForeignKey(City, models.CASCADE, verbose_name='–ì–æ—Ä–æ–¥', default=None, null=True)
    date = models.DateField('–î–∞—Ç–∞')
    times = models.CharField('–í—Ä–µ–º—è', max_length=512)
    status = models.CharField('–°—Ç–∞—Ç—É—Å', max_length=16, choices=STATUSES, default=types.Order.WAIT)
    message_id = models.PositiveIntegerField(default=None, null=True)

    def __str__(self):
        return str(self.id)

    class Meta:
        verbose_name = '–∑–∞–∫–∞–∑'
        verbose_name_plural = '–∑–∞–∫–∞–∑—ã'


class Request(models.Model):
    created = models.DateTimeField('üïê –°–æ–∑–¥–∞–Ω, –ø–æ UTC', auto_now_add=True)
    order = models.ForeignKey(Order, models.CASCADE, verbose_name='–ó–∞–∫–∞–∑')
    master = models.ForeignKey(User, models.CASCADE, verbose_name='–ú–∞—Å—Ç–µ—Ä')
    message_id = models.PositiveIntegerField(default=None, null=True)

    def __str__(self):
        return str(self.id)

    class Meta:
        verbose_name = '–æ—Ç–∫–ª–∏–∫'
        verbose_name_plural = '–æ—Ç–∫–ª–∏–∫–∏'


class Transaction(models.Model):
    created = models.DateTimeField('üïê –°–æ–∑–¥–∞–Ω, –ø–æ UTC', auto_now_add=True)
    user = models.ForeignKey(User, models.CASCADE, verbose_name='–ú–∞—Å—Ç–µ—Ä')
    amount = models.PositiveIntegerField('–°—É–º–º–∞')
    currency = models.CharField('–í–∞–ª—é—Ç–∞', max_length=16)
    reference = models.CharField(max_length=64)
    refund = models.BooleanField(default=False)

    def __str__(self):
        return str(self.id)

    class Meta:
        verbose_name = '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'
        verbose_name_plural = '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'


class Price(models.Model):
    amount = models.PositiveIntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤')
    price = models.PositiveIntegerField('–°—Ç–æ–∏–º–æ—Å—Ç—å')

    def __str__(self):
        return str(self.price)

    class Meta:
        verbose_name = '—Ü–µ–Ω–∞'
        verbose_name_plural = '—Ü–µ–Ω—ã'


class Settings(Preferences):
    media_chat_link = models.URLField('–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –º–µ–¥–∏–∞', max_length=64, default='-')
    media_chat_id = models.BigIntegerField('ID —á–∞—Ç–∞ –º–µ–¥–∏–∞', default=0)

    def __str__(self):
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'

    class Meta:
        verbose_name = '—Å–ø–∏—Å–æ–∫'
        verbose_name_plural = '—Å–ø–∏—Å–∫–∏'


class Post(models.Model):
    STATUSES = ((types.Post.WAIT, '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'), (types.Post.SEND, 'üì® –û—Ç–ø—Ä–∞–≤–∫–∞'), (types.Post.DONE, 'üé´ –ì–æ—Ç–æ–≤–æ'))
    USER_TYPES = ((types.User.CLIENT, '–ö–ª–∏–µ–Ω—Ç'), (types.User.MASTER, '–ú–∞—Å—Ç–µ—Ä'))
    created = models.DateTimeField('üïê –°–æ–∑–¥–∞–Ω–æ', auto_now_add=True)
    status = models.CharField('–°—Ç–∞—Ç—É—Å', max_length=4, choices=STATUSES, default=types.Post.WAIT)
    photo_id = models.CharField('–§–æ—Ç–æ', max_length=128, blank=True, null=True)
    photo_id.help_text = "–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ FileID, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É –Ω—É–∂–Ω–æ–µ –≤–∞–º —Ñ–æ—Ç–æ."
    gif_id = models.CharField('GIF', max_length=128, blank=True, null=True)
    gif_id.help_text = "–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ FileID, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É –Ω—É–∂–Ω–æ–µ –≤–∞–º gif."
    video_id = models.CharField('–í–∏–¥–µ–æ', max_length=128, blank=True, null=True)
    video_id.help_text = "–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ FileID, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É –Ω—É–∂–Ω–æ–µ –≤–∞–º –≤–∏–¥–µ–æ."
    message = models.TextField("–°–æ–æ–±—â–µ–Ω–∏–µ", max_length=1024)
    preview = models.BooleanField("–ü—Ä–µ–≤—å—é", default=True)
    button = models.CharField("–ö–Ω–æ–ø–∫–∞", max_length=256, blank=True, null=True)
    link = models.URLField("–°—Å—ã–ª–∫–∞", blank=True, null=True)
    receivers = models.IntegerField("–ü–æ–ª—É—á–∞—Ç–µ–ª–∏", blank=True, null=True)
    user_type = models.CharField(max_length=8, choices=USER_TYPES, verbose_name='–¢–∏–ø', blank=True, default=None, null=True)

    def __str__(self):
        return str(self.id)

    class Meta:
        verbose_name = '–ø–æ—Å—Ç'
        verbose_name_plural = '–ø–æ—Å—Ç—ã'


class MediaGroupHelper(models.Model):
    media_group_id = models.PositiveBigIntegerField()
    photo_id = models.CharField(max_length=128, default=None, null=True)
    video_id = models.CharField(max_length=128, default=None, null=True)


class Media(models.Model):
    TYPES = ((types.Media.PHOTO, '–§–æ—Ç–æ'), (types.Media.VIDEO, '–í–∏–¥–µ–æ'))
    type = models.CharField(max_length=8, choices=TYPES)
    file_id = models.CharField(max_length=128)
    file_url = models.URLField(max_length=1024, default=None, null=True)
    url_created = models.DateTimeField(default=None, null=True)
    portfolio = models.ForeignKey(Portfolio, models.CASCADE, verbose_name='–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ')


class Stats:
    class Meta:
        proxy = True
        verbose_name = '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        verbose_name_plural = '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'


class UserStats(User, Stats): pass
class CategoryStats(Category, Stats): pass
class OrderStats(Order, Stats): pass
class RequestStats(Request, Stats): pass
